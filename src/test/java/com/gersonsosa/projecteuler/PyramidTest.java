package com.gersonsosa.projecteuler;

import org.assertj.core.api.Assertions;
import org.junit.Test;

/**
 * @author <a href="mailto:gg.sosa@transportsystems.co">Gerson Sosa</a>
 */
public class PyramidTest {
    @Test
    public void shouldFindMin() {
        Assertions.assertThat(Pyramid.findMin(8, 1, 2, 3)).isEqualTo(1);
        Assertions.assertThat(Pyramid.findMin(1, 2, 2, 3)).isEqualTo(1);
        Assertions.assertThat(Pyramid.findMin(1, 7, 6, 10)).isEqualTo(1);
        Assertions.assertThat(Pyramid.findMin(4, 7, 45, 5)).isEqualTo(4);
        Assertions.assertThat(Pyramid.findMin(8, 7, 6, 5)).isEqualTo(5);
        Assertions.assertThat(Pyramid.findMin(10, 10, 10, 10)).isEqualTo(10);
        Assertions.assertThat(Pyramid.findMin(0, 0, 0, 0)).isEqualTo(0);
    }

    @Test
    public void shouldFindLargestPyramid() {

        int n = 6, m = 6;
        int k = 9;

        int[][] h = {
                {0, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 3},
                {1, 1, 1, 1, 1, 1},
                {1, 1, 1, 2, 1, 1},
                {1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1}};

        Assertions.assertThat(Pyramid.findLargestPyramid(n, m, k, h)).isEqualTo(3);
    }

    @Test
    public void shouldFindLargestPyramid1() {

        int n = 30, m = 29, k = 31369;

        int[][] h = {
                {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 5, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1},
                {1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 7, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1},
                {4, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 4, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 3, 1, 1, 1},
                {0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0},
                {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 7, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 2, 0, 0, 13, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1},
                {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0},
                {1, 1, 0, 2, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0},
                {1, 1, 0, 0, 2, 0, 0, 2, 1, 0, 0, 2, 3, 3, 3, 2, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 2, 0, 1, 3, 2, 1, 2, 2, 4, 3, 3, 3, 2, 3, 2, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1},
                {1, 0, 0, 1, 2, 3, 4, 3, 3, 4, 5, 5, 5, 1, 3, 3, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0},
                {1, 4, 0, 0, 1, 1, 5, 5, 4, 6, 5, 4, 5, 5, 0, 0, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 1, 2, 2, 6, 6, 5, 1, 7, 5, 3, 4, 3, 3, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0},
                {1, 1, 0, 2, 3, 1, 3, 4, 5, 6, 5, 6, 5, 5, 4, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},
                {1, 0, 0, 0, 0, 0, 4, 6, 6, 5, 5, 4, 6, 3, 3, 3, 0, 1, 1, 1, 7, 1, 1, 1, 6, 1, 0, 0, 1},
                {3, 1, 1, 0, 3, 3, 4, 4, 6, 8, 6, 6, 3, 6, 3, 1, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 1, 2, 3, 3, 5, 4, 5, 5, 6, 2, 6, 3, 2, 1, 1, 1, 1, 0, 1, 7, 1, 1, 1, 1, 1, 0},
                {1, 2, 0, 0, 0, 4, 2, 5, 5, 5, 5, 4, 6, 5, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 1, 3, 1, 5, 4, 5, 3, 4, 3, 5, 4, 3, 2, 2, 2, 0, 0, 1, 6, 0, 1, 0, 0, 1, 1, 1},
                {0, 1, 0, 0, 0, 2, 2, 1, 2, 2, 4, 1, 3, 3, 3, 4, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 0, 0, 2, 0, 2, 2, 2, 1, 3, 0, 3, 0, 1, 1, 1, 3, 2, 0, 0, 0, 6, 1, 1, 0, 1, 1, 0, 0},
                {1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 0, 2, 2, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1},
                {1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 5, 1, 1, 1, 0, 1, 1, 1},
                {1, 3, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1},
                {0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1}
        };

        Assertions.assertThat(Pyramid.findLargestPyramid(n, m, k, h)).isEqualTo(9);
    }

    @Test
    public void shouldName() {
        int n = 1, m = 1, k = 1;

        int[][] h = {{2}};

        Assertions.assertThat(Pyramid.findLargestPyramid(n, m, k, h)).isEqualTo(0);
    }
}